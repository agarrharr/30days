---
layout: post
title: "Day 13: MDN Layout part 2: Positioning"
date: 2016-12-4
categories: CSS
---

Today's MDN unit talks about [Positioning](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning). Floats are actually before Positioning in their curriculum, but after spending a few hours playing with absolute and relative positioning in codepen last night, I think it clicked. I'm going to skip straight to positioning so that I can drive than home and then go back to Floats tomorrow. 

## Positioning ##

- Positioning allows you to take elements out of normal document flow and change their behavior.

### Document Flow ### 

- By default, block level elements take up 100% of the width of it's parent element and are as tall as the contained content.
    - By default, block level elements are laid out verticallly in the viewport and sit on top of eachother, separated by the margin that you've set.

- Inline elements are as tall and as wide as the content.
    - You can't set width or height, they sit inside the content of block level elements. 
    - If you want to control the size, you need to use display: block;
    - Inline elements don't appear on new lines, but sit next to one another. 

- If two adjacent elements both have a set margin then the larger of the two remains while the other collapses.



### Introducing Positioning ###

- Allows you to orride document flow behavior. 

**Static Positioning**
- Default positioning for every element. 

**Relative Positioning**

- Similar to static positioning, exccept you can move elements out of their normal layout flow. 
- position: relative;

**Introducing top, bottom, left, and right**

- top, bottom, left, and right are used to specify where you want to move the elements. 

```CSS
.positioned{
    positioned: relative;
    top: 30px;  
    left: 30px;
}
```
- In this example, the positioned element will get pushed down from the top by 30px pixels, and away from the left by 30px; So it moves down and to the right.
- In addition, there will be a gap in the document flow where the element had previously been.

**Absolute Positioning**

- If you now change the previous code to "positioned: absolute;" then it will instead be move up and to left, so that it's 30px away from the top and left. 
    - Rather specifying the direction that the elements should move (as in relative positioning) it specifies the distance the element should be from the containing elements sides.
- Also, the other elements have filled the gap where the positioned element had previous been.
    - This is because absolutely positioned elements are no longer in normal document flow. It now sits on own layer, separate from everything else.
    - Useful for making popup information boxes, control menus, rollover panels, UI features that can be dragged and dropped, etc.

**Positioning Contexts**

- The default containing element is <html>, so in the previous example, it was positioned relative to the <html> container.
- You can override this by adding "position: relative;" to one of the other ancestors of our element.

**Introducing Z-Index**

- If you have overlapping elements, you can change the stacking order by using the Z-index.
- Z-index is a reference to the z-axis. 
- By default, all elements have a z-index of auto (this is effectively 0), and higher values move them forward on the z-axis.
- If all else is default, you can move an element to the top by using "z-index: 1;"

**Fixed Positioning**

- This works similar to absolute, except it *doesn't* positioned an element relative to <html> (or it's nearest positioned ancestor).
- fixed positioning positions an element relative to the viewport. 
- Allows you create UI elements that are fixed on the screen (such as fixed navigational bars, or those annoys ads that follow you as your scrool down the page).
- The article uses the following example code:
```CSS
h1{
    position: fixed;
    top: 0px;
    width: 500px;
    margin: 0 auto;
    background: white;
    padding: 10px;
}
```
- This takes the h1 element out of normal document flow so the other elements shift upward. You can add a margin to the top of the first element to prevent overlap.
- when scrolling down, the h1 element will remain positioned at the very top of the viewport.

**Experimental: Position Sticky**
- Essentially a hybrid between relative and fixed position.
- Allows a positioned element to act like it's relatively positioned until it is scrolled to a certain point, then it becomes fixed.
- [Not very widely supported by browsers](http://caniuse.com/#search=sticky).

That's the end of the first article on positioning. There's a second article entitled [Practical positioning examples](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Practical_positioning_examples)

## Practical Positioning Examples ## 