---
layout: post
title: "Day 10: Net Ninja CSS Animations Tutorial (Pt. 1)" 
date: 2016-12-2
categories: CSS
---

Next up, I'm going to try to tackle the Net Ninja CSS Animations tutorial. I fully expected this to be kind of tricky, so I wasn't surprised when I didn't finish it in the one day. 

**Video 1: Introduction**  

- Makes animating web elements much easier
- Eliminates the need for Javascript for many animation effects.
- Easy once you get the hang of it.

### Necessary Skills ###  

- Transforms
- Transitions
- Keyframes
- Animation Basics
- Practical Examples

**Video 2: Transforms**  

- translate: move the element from one position to another on the web page.
    translateX moves it to the right, translateY move it down. 
    translate(-200px, 200px) will move it left 200px, and down 200px.
- scale: scales the element. A value of 1 won't do anything.
    scaleX(3) will make it three times as wide. 
- rotate: rotates the element along the x, y, or z axis. Example:
{% highlight CSS %}
    img{
        transform: rotateX(100deg):
    }

    rotateZ(); is the most visually apparent. 
- Multiple transforms can be used at the same time:

    img{
        transform: rotateZ(-90deg) translateY(200px) scale(2);
    }      
{% endhighlight %}
- Multiple transforms will act sequentially, so in this example rotateZ() works, followed by translateY() and then scale();

**Video 3: Transitions**  

- Transition an element from one state to another over a set amount of time. 

{% highlight CSS %}
.circle{
    width: 100px;
    padding: 50px 0;
    line-height: 0;
    margin: 60px auto;
    background: pink;
    color: white;
    border-radius: 50px;
    cursor: pointer;
    transition: background 1s, transform 0.3s 1s ease-in;
}

.circle:hover{
    background: salmon;
    transform: rotate(360deg);
}

{% endhighlight %}

- This code example will transition the background to salmon over a period of 1s, and the apply the transform over .3 seconds. Notice how the two effects are chained together in the transition parameter. The transform also has a 1s delay applied to it as well as ease-in timing function (note, the first number passed is the time duration, second number passed is the delay, the third is the timing function).

- Other timing functions include linear, ease, ease-out, and steps() which takes two values such as steps(4, end);

- MDN has a great page on the [transition-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function).

**Video 4: Keyframes**  

- Powerhouse of CSS Animations
- Use a different keyframe block for every type of animation we use.

- Keyframe blocks are created using the following formate: @keyframe *name*{ ... }

- The example used in the video is: 

{% highlight CSS %}

/*// ELEMENTS TO ANIMATE //*/

.mario{
    position: absolute;
    top: -40px;
    left: 0px; 
    animation-name: drive;
    animation-duration: 3s;
    
}

/*// KEYFRAMES //*/

@keyframes drive{
    from{ 
        transform: translateX(0);
    }
    to{ 
        transform: translateX(700px);
    }
}
{% endhighlight %}

- In this example, animation-name assigns to keyframe drive to mario, and animation-duration tells it to take mario 3 seconds to move from one spot to the other. 

**Video 5: Animation Fill Mode** 

- animation-fill-mode decides what to do with the element outside of the animation window.

- Right now our element jumps back to the beginning after his transform. We can override this default behavior by adding "animation-fill-mode: forwards;" to the mario class. Use can pass backwards, forwards, or both to the animation-fill-mode function.

{% highlight CSS %}
.mario{
    position: absolute;
    top: -40px;
    left: 0px; 
    animation-name: drive;
    animation-duration: 3s;
    animation-fill-mode: both;
    animation-delay: 2s;
    
}

/*// KEYFRAMES //*/

@keyframes drive{
    from{ 
        transform: translateX(200px);
    }
    to{ 
        transform: translateX(700px);
    }
}
{% endhighlight %}

**Video 6: Repeating Animations**  

- "animation-iteration-count: 3;" will cause the animation to repeat itself three times. 
- In this case, we can change the translateX values so that mario begins off-screen and then drives across the screen and back out of view. 
- If you want the animation to continue indefinitely, you can use "animation-iteration-couont: infinite;"

**Video 7: Animation Direction**  

- We can use "animation-direction: " to determine the direction of the animation. The possible keywords that we can use are alternate, alternate-reverse, normal, and reverse. The default value is normal.
- We can also call our previous keyframe from a different class, as seen here: 

{% highlight CSS %}
.luigi{
    position: absolute;
    top: 100px;
    left: 0px;
    animation-name: drive;
    animation-duration: 5s;
    animation-fill-mode: both;
    animation-iteration-count: infinite;
    animation-direction: alternate-reverse;
}
{% endhighlight %}

- This code block creates a .luigi animation that begins in reverse and then alternates to forward every time a new iteration begins. 

**Video 8: Animation Timing Functions**  

- The [animation-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function) determines the rate that an element goes from the start to end location. Up to now, in our example, the elements slow down toward the end because the default value is ease. When it's set to ease, it starts slow, speeds up, and then slows down toward the end.
- In addition to the default keywords, we can pass in our own custom value using the cubic-bezier() function
- The cubic-bezier function takes four numbers. [cubic-bezier.com](http://cubic-bezier.com) has a useful generator for creating our own cubic-bezier curves. A steep curve means it's going fast, a less steep curve means it's going slow. In this way, you can customize the timing of the transition. 

{% highlight CSS %}
.mario{
    position: absolute;
    top: -40px;
    left: 0px; 
    animation-name: drive;
    animation-duration: 3s;
    animation-fill-mode: both; 
    animation-iteration-count: infinite;
    animation-timing-function: cubic-bezier(0,.52,1,-0.03);
}
{% endhighlight %}

